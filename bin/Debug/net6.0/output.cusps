
public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }


public static CubeScriptSyntax {placeholder}(CubeScriptSyntaxTree syntaxTree)
        {
             foreach (CubeScriptSyntax syntax in syntaxTree.Syntax)
            {
                // use the Template_VaribleDesignation() to check if the syntax is in the correct order
                // take a template and strip the <||> from it and compare it to the syntax

                // if the syntax matches the template, continue
                if (syntax != null)
                {
                    // check if the next syntax is a return type, name, (, ), { and endfunctionstart in order
                    if (syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 1].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 2].Type == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 3].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 4].Value == "AmpersandAmpersandToken" &&
                        syntaxTree.Syntax[syntaxTree.Syntax.IndexOf(syntax) + 5].Value == "{Fifth}")
                    {
                        // if the syntax is in the correct order, continue
                        Console.WriteLine("Syntax is correct");
                        continue;
                    }


                    else
                    {
                        Exception e = new Exception("Syntax Error: CUSP0002: Function is not Correct"); // if the syntax is not recognized throw an error
                        throw e;
                    }
                }
            
                else
                {
                    Exception e = new Exception("Syntax Error: CUSP0003: Syntax is not recognized"); // if the syntax is not recognized throw an error
                    throw e;
                }
            }
            return null;
        }

