//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/GAMER/source/repos/ProtoGram/CubeScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CubeScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, WHILE=42, ARRAY=43, Comment=44, BOOL_OPERATOR=45, 
		INTEGER=46, FLOAT=47, IMPORT=48, STRING=49, BOOL=50, TYPE=51, NULL=52, 
		WS=53, IDENTIFIER=54;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseifBlock = 4, RULE_whileBlock = 5, RULE_functiondefinition = 6, 
		RULE_assignment = 7, RULE_functionCall = 8, RULE_block = 9, RULE_expression = 10, 
		RULE_multOp = 11, RULE_addOp = 12, RULE_cmpOp = 13, RULE_boolOp = 14, 
		RULE_constant = 15;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseifBlock", "whileBlock", 
		"functiondefinition", "assignment", "functionCall", "block", "expression", 
		"multOp", "addOp", "cmpOp", "boolOp", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'house:'", "'{'", "'}'", "'for'", "'('", "'>'", "')'", 
		"'<'", "'='", "'['", "','", "']'", "'if'", "'else'", "'struct'", "'-'", 
		"'!'", "'?'", "':'", "'++'", "'--'", "'*'", "'/'", "'%'", "'^'", "'<<'", 
		"'>>'", "'&'", "'|'", "'&&'", "'||'", "'+='", "'-='", "'*='", "'+'", "'<='", 
		"'>='", "'=='", "'!='", null, null, null, null, null, null, null, null, 
		null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "WHILE", "ARRAY", "Comment", "BOOL_OPERATOR", 
		"INTEGER", "FLOAT", "IMPORT", "STRING", "BOOL", "TYPE", "NULL", "WS", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CubeScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CubeScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CubeScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CubeScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CubeScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26982015345789000L) != 0)) {
				{
				{
				State = 32;
				line();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(CubeScriptParser.Comment, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__5:
			case T__10:
			case T__16:
			case ARRAY:
			case INTEGER:
			case FLOAT:
			case IMPORT:
			case STRING:
			case BOOL:
			case TYPE:
			case NULL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				statement();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				ifBlock();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				whileBlock();
				State = 43;
				expression(0);
				}
				break;
			case Comment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				Match(Comment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctiondefineContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public FunctiondefineContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctiondefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctiondefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallexprrContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctioncallexprrContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallexprr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallexprr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallexprr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentexprContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentexprContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForloopContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForloopContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterForloop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitForloop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForloop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportstatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(CubeScriptParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		public ImportstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterImportstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitImportstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamespacestatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public NamespacestatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterNamespacestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitNamespacestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacestatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariblecallexprContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VariblecallexprContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterVariblecallexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitVariblecallexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariblecallexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringarrayContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(CubeScriptParser.ARRAY, 0); }
		public StringarrayContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterStringarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitStringarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringarray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArraydefinitionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(CubeScriptParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArraydefinitionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterArraydefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitArraydefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VaribleexprContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		public VaribleexprContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterVaribleexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitVaribleexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVaribleexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new AssignmentexprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				assignment();
				}
				break;
			case 2:
				_localctx = new ImportstatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(IMPORT);
				State = 50;
				Match(IDENTIFIER);
				State = 51;
				Match(T__0);
				}
				break;
			case 3:
				_localctx = new ImportstatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				Match(IMPORT);
				State = 53;
				Match(IDENTIFIER);
				State = 54;
				Match(T__1);
				State = 55;
				Match(IDENTIFIER);
				State = 56;
				Match(T__0);
				}
				break;
			case 4:
				_localctx = new NamespacestatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				Match(T__2);
				State = 58;
				Match(IDENTIFIER);
				State = 59;
				Match(T__3);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26982015345789000L) != 0)) {
					{
					{
					State = 60;
					line();
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 66;
				Match(T__4);
				}
				break;
			case 5:
				_localctx = new FunctiondefineContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				functiondefinition();
				}
				break;
			case 6:
				_localctx = new ForloopContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				Match(T__5);
				State = 69;
				Match(T__6);
				State = 70;
				Match(IDENTIFIER);
				State = 71;
				Match(T__7);
				State = 72;
				Match(IDENTIFIER);
				State = 73;
				Match(T__8);
				State = 74;
				block();
				}
				break;
			case 7:
				_localctx = new ForloopContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 75;
				Match(T__5);
				State = 76;
				Match(T__6);
				State = 77;
				Match(IDENTIFIER);
				State = 78;
				Match(T__9);
				State = 79;
				Match(IDENTIFIER);
				State = 80;
				Match(T__8);
				State = 81;
				block();
				}
				break;
			case 8:
				_localctx = new VariblecallexprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 82;
				Match(TYPE);
				State = 83;
				Match(IDENTIFIER);
				State = 84;
				Match(T__10);
				State = 85;
				functionCall();
				State = 86;
				Match(T__0);
				}
				break;
			case 9:
				_localctx = new FunctioncallexprrContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 88;
				functionCall();
				State = 89;
				Match(T__0);
				}
				break;
			case 10:
				_localctx = new VaribleexprContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 91;
				Match(IDENTIFIER);
				State = 92;
				Match(T__10);
				State = 93;
				expression(0);
				State = 94;
				Match(T__0);
				}
				break;
			case 11:
				_localctx = new VaribleexprContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 96;
				Match(TYPE);
				State = 97;
				Match(IDENTIFIER);
				State = 98;
				Match(T__10);
				State = 99;
				expression(0);
				State = 100;
				Match(T__0);
				}
				break;
			case 12:
				_localctx = new StringarrayContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 102;
					Match(IDENTIFIER);
					}
				}

				State = 105;
				Match(TYPE);
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 106;
					Match(IDENTIFIER);
					}
				}

				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 109;
					Match(ARRAY);
					}
				}

				State = 112;
				Match(T__10);
				State = 113;
				functionCall();
				State = 114;
				Match(T__0);
				}
				break;
			case 13:
				_localctx = new ArraydefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 117;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 116;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 120;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 119;
					constant();
					}
					break;
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 122;
					Match(IDENTIFIER);
					}
				}

				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 125;
					Match(ARRAY);
					}
				}

				State = 128;
				Match(T__10);
				State = 129;
				Match(T__11);
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
					{
					State = 130;
					expression(0);
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 131;
						Match(T__12);
						State = 132;
						expression(0);
						}
						}
						State = 137;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 140;
				Match(T__13);
				State = 141;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__14);
			State = 145;
			expression(0);
			State = 146;
			block();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 147;
				Match(T__15);
				State = 148;
				elseifBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterElseifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitElseifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseifBlock);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				block();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CubeScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(WHILE);
			State = 156;
			expression(0);
			State = 157;
			block();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 158;
				Match(T__15);
				State = 159;
				elseifBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctiondefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctiondefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__16);
			State = 163;
			Match(IDENTIFIER);
			State = 164;
			Match(T__6);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 165;
				Match(IDENTIFIER);
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__12) {
					{
					{
					State = 166;
					Match(T__12);
					State = 167;
					Match(IDENTIFIER);
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 175;
			Match(T__8);
			State = 176;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(IDENTIFIER);
			State = 179;
			Match(T__10);
			State = 180;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctioncallexprsContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctioncallexprsContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallexprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		int _la;
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new FunctioncallexprsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				Match(IDENTIFIER);
				State = 183;
				Match(T__6);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
					{
					State = 184;
					expression(0);
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 185;
						Match(T__12);
						State = 186;
						expression(0);
						}
						}
						State = 191;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 194;
				Match(T__8);
				}
				break;
			case 2:
				_localctx = new FunctioncallexprsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(IDENTIFIER);
				State = 196;
				Match(T__1);
				State = 197;
				Match(IDENTIFIER);
				State = 198;
				Match(T__6);
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
					{
					State = 199;
					expression(0);
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 200;
						Match(T__12);
						State = 201;
						expression(0);
						}
						}
						State = 206;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 209;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__3);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26982015345789000L) != 0)) {
				{
				{
				State = 213;
				line();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 219;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncrementexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IncrementexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterIncrementexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitIncrementexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterNegationexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitNegationexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterTernaryexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitTernaryexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DotexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterDotexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitDotexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayassignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayassignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterArrayassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitArrayassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayassignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotfunctioncallexprsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotfunctioncallexprsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterDotfunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitDotfunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotfunctioncallexprs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterArrayexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitArrayexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BinaryexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBinaryexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBinaryexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterConstantexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitConstantexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctioncallexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterParenthesisexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitParenthesisexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DecrementexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterDecrementexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitDecrementexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				_localctx = new ConstantexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 222;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FunctioncallexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				functionCall();
				}
				break;
			case 3:
				{
				_localctx = new ParenthesisexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				Match(T__6);
				State = 225;
				expression(0);
				State = 226;
				Match(T__8);
				}
				break;
			case 4:
				{
				_localctx = new NegationexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 228;
				Match(T__17);
				State = 229;
				expression(19);
				}
				break;
			case 5:
				{
				_localctx = new NegationexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(T__18);
				State = 231;
				expression(18);
				}
				break;
			case 6:
				{
				_localctx = new IncrementexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 232;
				Match(IDENTIFIER);
				State = 233;
				Match(T__21);
				}
				break;
			case 7:
				{
				_localctx = new DecrementexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 234;
				Match(IDENTIFIER);
				State = 235;
				Match(T__22);
				}
				break;
			case 8:
				{
				_localctx = new IncrementexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				constant();
				State = 237;
				Match(T__21);
				}
				break;
			case 9:
				{
				_localctx = new DecrementexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 239;
				constant();
				State = 240;
				Match(T__22);
				}
				break;
			case 10:
				{
				_localctx = new DotexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 242;
				Match(IDENTIFIER);
				State = 243;
				Match(T__1);
				State = 244;
				Match(IDENTIFIER);
				}
				break;
			case 11:
				{
				_localctx = new DotfunctioncallexprsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				Match(IDENTIFIER);
				State = 246;
				Match(T__1);
				State = 247;
				Match(IDENTIFIER);
				State = 248;
				Match(T__6);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
					{
					State = 249;
					expression(0);
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 250;
						Match(T__12);
						State = 251;
						expression(0);
						}
						}
						State = 256;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 259;
				Match(T__8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 353;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new BinaryexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 262;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 263;
						multOp();
						State = 264;
						expression(24);
						}
						break;
					case 2:
						{
						_localctx = new BinaryexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 266;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 267;
						addOp();
						State = 268;
						expression(23);
						}
						break;
					case 3:
						{
						_localctx = new BinaryexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 270;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 271;
						cmpOp();
						State = 272;
						expression(22);
						}
						break;
					case 4:
						{
						_localctx = new BinaryexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 274;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 275;
						boolOp();
						State = 276;
						expression(21);
						}
						break;
					case 5:
						{
						_localctx = new TernaryexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 278;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 279;
						Match(T__19);
						State = 280;
						expression(0);
						State = 281;
						Match(T__20);
						State = 282;
						expression(18);
						}
						break;
					case 6:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 284;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 285;
						Match(T__11);
						State = 287;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
							{
							State = 286;
							expression(0);
							}
						}

						State = 289;
						Match(T__13);
						State = 290;
						Match(T__10);
						State = 291;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 292;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 293;
						Match(T__3);
						State = 295;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
							{
							State = 294;
							expression(0);
							}
						}

						State = 297;
						Match(T__4);
						State = 298;
						Match(T__10);
						State = 299;
						expression(5);
						}
						break;
					case 8:
						{
						_localctx = new DotexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 300;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 301;
						Match(T__1);
						State = 302;
						Match(IDENTIFIER);
						}
						break;
					case 9:
						{
						_localctx = new DotfunctioncallexprsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 304;
						Match(T__1);
						State = 305;
						Match(IDENTIFIER);
						State = 306;
						Match(T__6);
						State = 315;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
							{
							State = 307;
							expression(0);
							State = 312;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__12) {
								{
								{
								State = 308;
								Match(T__12);
								State = 309;
								expression(0);
								}
								}
								State = 314;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 317;
						Match(T__8);
						}
						break;
					case 10:
						{
						_localctx = new ArrayexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 318;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 319;
						Match(T__11);
						State = 321;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
							{
							State = 320;
							expression(0);
							}
						}

						State = 323;
						Match(T__13);
						}
						break;
					case 11:
						{
						_localctx = new ArrayexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 324;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 325;
						Match(T__3);
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
							{
							State = 326;
							expression(0);
							}
						}

						State = 329;
						Match(T__4);
						}
						break;
					case 12:
						{
						_localctx = new IncrementexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 330;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 331;
						Match(T__21);
						}
						break;
					case 13:
						{
						_localctx = new DecrementexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 332;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 333;
						Match(T__22);
						}
						break;
					case 14:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 335;
						Match(T__11);
						State = 337;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754044121216L) != 0)) {
							{
							State = 336;
							expression(0);
							}
						}

						State = 339;
						Match(T__13);
						State = 340;
						Match(T__10);
						State = 341;
						functionCall();
						}
						break;
					case 15:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 342;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 343;
						Match(T__3);
						State = 347;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
						while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1+1 ) {
								{
								{
								State = 344;
								expression(0);
								}
								} 
							}
							State = 349;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
						}
						State = 350;
						Match(T__4);
						State = 351;
						Match(T__10);
						State = 352;
						functionCall();
						}
						break;
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 137422178304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__36) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterCmpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitCmpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168605440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OPERATOR() { return GetToken(CubeScriptParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CubeScriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CubeScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CubeScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CubeScriptParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CubeScriptParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 30, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 26669754043334656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 23);
		case 1: return Precpred(Context, 22);
		case 2: return Precpred(Context, 21);
		case 3: return Precpred(Context, 20);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 16);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 13);
		case 11: return Precpred(Context, 12);
		case 12: return Precpred(Context, 11);
		case 13: return Precpred(Context, 5);
		case 14: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,369,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,47,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,
		62,8,2,10,2,12,2,65,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,104,8,2,1,2,1,2,3,2,108,8,2,1,2,3,
		2,111,8,2,1,2,1,2,1,2,1,2,1,2,3,2,118,8,2,1,2,3,2,121,8,2,1,2,3,2,124,
		8,2,1,2,3,2,127,8,2,1,2,1,2,1,2,1,2,1,2,5,2,134,8,2,10,2,12,2,137,9,2,
		3,2,139,8,2,1,2,1,2,3,2,143,8,2,1,3,1,3,1,3,1,3,1,3,3,3,150,8,3,1,4,1,
		4,3,4,154,8,4,1,5,1,5,1,5,1,5,1,5,3,5,161,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
		5,6,169,8,6,10,6,12,6,172,9,6,3,6,174,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,8,1,8,1,8,1,8,1,8,5,8,188,8,8,10,8,12,8,191,9,8,3,8,193,8,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,5,8,203,8,8,10,8,12,8,206,9,8,3,8,208,8,8,1,8,
		3,8,211,8,8,1,9,1,9,5,9,215,8,9,10,9,12,9,218,9,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,5,10,253,8,10,10,10,12,10,256,9,10,3,10,258,8,10,1,10,3,10,261,8,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,288,8,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,296,8,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,311,8,10,10,10,12,10,314,9,10,
		3,10,316,8,10,1,10,1,10,1,10,1,10,3,10,322,8,10,1,10,1,10,1,10,1,10,3,
		10,328,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,338,8,10,1,10,
		1,10,1,10,1,10,1,10,1,10,5,10,346,8,10,10,10,12,10,349,9,10,1,10,1,10,
		1,10,5,10,354,8,10,10,10,12,10,357,9,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,15,1,347,1,20,16,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,0,4,2,0,11,11,24,36,2,0,18,18,37,37,3,0,8,8,10,10,38,41,3,
		0,46,47,49,52,54,54,424,0,35,1,0,0,0,2,46,1,0,0,0,4,142,1,0,0,0,6,144,
		1,0,0,0,8,153,1,0,0,0,10,155,1,0,0,0,12,162,1,0,0,0,14,178,1,0,0,0,16,
		210,1,0,0,0,18,212,1,0,0,0,20,260,1,0,0,0,22,358,1,0,0,0,24,360,1,0,0,
		0,26,362,1,0,0,0,28,364,1,0,0,0,30,366,1,0,0,0,32,34,3,2,1,0,33,32,1,0,
		0,0,34,37,1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,
		0,0,38,39,5,0,0,1,39,1,1,0,0,0,40,47,3,4,2,0,41,47,3,6,3,0,42,43,3,10,
		5,0,43,44,3,20,10,0,44,47,1,0,0,0,45,47,5,44,0,0,46,40,1,0,0,0,46,41,1,
		0,0,0,46,42,1,0,0,0,46,45,1,0,0,0,47,3,1,0,0,0,48,143,3,14,7,0,49,50,5,
		48,0,0,50,51,5,54,0,0,51,143,5,1,0,0,52,53,5,48,0,0,53,54,5,54,0,0,54,
		55,5,2,0,0,55,56,5,54,0,0,56,143,5,1,0,0,57,58,5,3,0,0,58,59,5,54,0,0,
		59,63,5,4,0,0,60,62,3,2,1,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,
		63,64,1,0,0,0,64,66,1,0,0,0,65,63,1,0,0,0,66,143,5,5,0,0,67,143,3,12,6,
		0,68,69,5,6,0,0,69,70,5,7,0,0,70,71,5,54,0,0,71,72,5,8,0,0,72,73,5,54,
		0,0,73,74,5,9,0,0,74,143,3,18,9,0,75,76,5,6,0,0,76,77,5,7,0,0,77,78,5,
		54,0,0,78,79,5,10,0,0,79,80,5,54,0,0,80,81,5,9,0,0,81,143,3,18,9,0,82,
		83,5,51,0,0,83,84,5,54,0,0,84,85,5,11,0,0,85,86,3,16,8,0,86,87,5,1,0,0,
		87,143,1,0,0,0,88,89,3,16,8,0,89,90,5,1,0,0,90,143,1,0,0,0,91,92,5,54,
		0,0,92,93,5,11,0,0,93,94,3,20,10,0,94,95,5,1,0,0,95,143,1,0,0,0,96,97,
		5,51,0,0,97,98,5,54,0,0,98,99,5,11,0,0,99,100,3,20,10,0,100,101,5,1,0,
		0,101,143,1,0,0,0,102,104,5,54,0,0,103,102,1,0,0,0,103,104,1,0,0,0,104,
		105,1,0,0,0,105,107,5,51,0,0,106,108,5,54,0,0,107,106,1,0,0,0,107,108,
		1,0,0,0,108,110,1,0,0,0,109,111,5,43,0,0,110,109,1,0,0,0,110,111,1,0,0,
		0,111,112,1,0,0,0,112,113,5,11,0,0,113,114,3,16,8,0,114,115,5,1,0,0,115,
		143,1,0,0,0,116,118,5,54,0,0,117,116,1,0,0,0,117,118,1,0,0,0,118,120,1,
		0,0,0,119,121,3,30,15,0,120,119,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,
		0,122,124,5,54,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,
		127,5,43,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,
		11,0,0,129,138,5,12,0,0,130,135,3,20,10,0,131,132,5,13,0,0,132,134,3,20,
		10,0,133,131,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,
		139,1,0,0,0,137,135,1,0,0,0,138,130,1,0,0,0,138,139,1,0,0,0,139,140,1,
		0,0,0,140,141,5,14,0,0,141,143,5,1,0,0,142,48,1,0,0,0,142,49,1,0,0,0,142,
		52,1,0,0,0,142,57,1,0,0,0,142,67,1,0,0,0,142,68,1,0,0,0,142,75,1,0,0,0,
		142,82,1,0,0,0,142,88,1,0,0,0,142,91,1,0,0,0,142,96,1,0,0,0,142,103,1,
		0,0,0,142,117,1,0,0,0,143,5,1,0,0,0,144,145,5,15,0,0,145,146,3,20,10,0,
		146,149,3,18,9,0,147,148,5,16,0,0,148,150,3,8,4,0,149,147,1,0,0,0,149,
		150,1,0,0,0,150,7,1,0,0,0,151,154,3,18,9,0,152,154,3,6,3,0,153,151,1,0,
		0,0,153,152,1,0,0,0,154,9,1,0,0,0,155,156,5,42,0,0,156,157,3,20,10,0,157,
		160,3,18,9,0,158,159,5,16,0,0,159,161,3,8,4,0,160,158,1,0,0,0,160,161,
		1,0,0,0,161,11,1,0,0,0,162,163,5,17,0,0,163,164,5,54,0,0,164,173,5,7,0,
		0,165,170,5,54,0,0,166,167,5,13,0,0,167,169,5,54,0,0,168,166,1,0,0,0,169,
		172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,174,1,0,0,0,172,170,1,
		0,0,0,173,165,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,9,0,0,
		176,177,3,18,9,0,177,13,1,0,0,0,178,179,5,54,0,0,179,180,5,11,0,0,180,
		181,3,20,10,0,181,15,1,0,0,0,182,183,5,54,0,0,183,192,5,7,0,0,184,189,
		3,20,10,0,185,186,5,13,0,0,186,188,3,20,10,0,187,185,1,0,0,0,188,191,1,
		0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,
		192,184,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,211,5,9,0,0,195,196,
		5,54,0,0,196,197,5,2,0,0,197,198,5,54,0,0,198,207,5,7,0,0,199,204,3,20,
		10,0,200,201,5,13,0,0,201,203,3,20,10,0,202,200,1,0,0,0,203,206,1,0,0,
		0,204,202,1,0,0,0,204,205,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,207,
		199,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,211,5,9,0,0,210,182,1,
		0,0,0,210,195,1,0,0,0,211,17,1,0,0,0,212,216,5,4,0,0,213,215,3,2,1,0,214,
		213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,
		0,0,0,218,216,1,0,0,0,219,220,5,5,0,0,220,19,1,0,0,0,221,222,6,10,-1,0,
		222,261,3,30,15,0,223,261,3,16,8,0,224,225,5,7,0,0,225,226,3,20,10,0,226,
		227,5,9,0,0,227,261,1,0,0,0,228,229,5,18,0,0,229,261,3,20,10,19,230,231,
		5,19,0,0,231,261,3,20,10,18,232,233,5,54,0,0,233,261,5,22,0,0,234,235,
		5,54,0,0,235,261,5,23,0,0,236,237,3,30,15,0,237,238,5,22,0,0,238,261,1,
		0,0,0,239,240,3,30,15,0,240,241,5,23,0,0,241,261,1,0,0,0,242,243,5,54,
		0,0,243,244,5,2,0,0,244,261,5,54,0,0,245,246,5,54,0,0,246,247,5,2,0,0,
		247,248,5,54,0,0,248,257,5,7,0,0,249,254,3,20,10,0,250,251,5,13,0,0,251,
		253,3,20,10,0,252,250,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,
		1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,257,249,1,0,0,0,257,258,1,0,0,
		0,258,259,1,0,0,0,259,261,5,9,0,0,260,221,1,0,0,0,260,223,1,0,0,0,260,
		224,1,0,0,0,260,228,1,0,0,0,260,230,1,0,0,0,260,232,1,0,0,0,260,234,1,
		0,0,0,260,236,1,0,0,0,260,239,1,0,0,0,260,242,1,0,0,0,260,245,1,0,0,0,
		261,355,1,0,0,0,262,263,10,23,0,0,263,264,3,22,11,0,264,265,3,20,10,24,
		265,354,1,0,0,0,266,267,10,22,0,0,267,268,3,24,12,0,268,269,3,20,10,23,
		269,354,1,0,0,0,270,271,10,21,0,0,271,272,3,26,13,0,272,273,3,20,10,22,
		273,354,1,0,0,0,274,275,10,20,0,0,275,276,3,28,14,0,276,277,3,20,10,21,
		277,354,1,0,0,0,278,279,10,17,0,0,279,280,5,20,0,0,280,281,3,20,10,0,281,
		282,5,21,0,0,282,283,3,20,10,18,283,354,1,0,0,0,284,285,10,6,0,0,285,287,
		5,12,0,0,286,288,3,20,10,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,
		0,0,289,290,5,14,0,0,290,291,5,11,0,0,291,354,3,20,10,7,292,293,10,4,0,
		0,293,295,5,4,0,0,294,296,3,20,10,0,295,294,1,0,0,0,295,296,1,0,0,0,296,
		297,1,0,0,0,297,298,5,5,0,0,298,299,5,11,0,0,299,354,3,20,10,5,300,301,
		10,16,0,0,301,302,5,2,0,0,302,354,5,54,0,0,303,304,10,15,0,0,304,305,5,
		2,0,0,305,306,5,54,0,0,306,315,5,7,0,0,307,312,3,20,10,0,308,309,5,13,
		0,0,309,311,3,20,10,0,310,308,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,
		312,313,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,315,307,1,0,0,0,315,316,
		1,0,0,0,316,317,1,0,0,0,317,354,5,9,0,0,318,319,10,14,0,0,319,321,5,12,
		0,0,320,322,3,20,10,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,
		323,354,5,14,0,0,324,325,10,13,0,0,325,327,5,4,0,0,326,328,3,20,10,0,327,
		326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,354,5,5,0,0,330,331,10,
		12,0,0,331,354,5,22,0,0,332,333,10,11,0,0,333,354,5,23,0,0,334,335,10,
		5,0,0,335,337,5,12,0,0,336,338,3,20,10,0,337,336,1,0,0,0,337,338,1,0,0,
		0,338,339,1,0,0,0,339,340,5,14,0,0,340,341,5,11,0,0,341,354,3,16,8,0,342,
		343,10,3,0,0,343,347,5,4,0,0,344,346,3,20,10,0,345,344,1,0,0,0,346,349,
		1,0,0,0,347,348,1,0,0,0,347,345,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,
		0,350,351,5,5,0,0,351,352,5,11,0,0,352,354,3,16,8,0,353,262,1,0,0,0,353,
		266,1,0,0,0,353,270,1,0,0,0,353,274,1,0,0,0,353,278,1,0,0,0,353,284,1,
		0,0,0,353,292,1,0,0,0,353,300,1,0,0,0,353,303,1,0,0,0,353,318,1,0,0,0,
		353,324,1,0,0,0,353,330,1,0,0,0,353,332,1,0,0,0,353,334,1,0,0,0,353,342,
		1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,21,1,0,0,0,
		357,355,1,0,0,0,358,359,7,0,0,0,359,23,1,0,0,0,360,361,7,1,0,0,361,25,
		1,0,0,0,362,363,7,2,0,0,363,27,1,0,0,0,364,365,5,45,0,0,365,29,1,0,0,0,
		366,367,7,3,0,0,367,31,1,0,0,0,37,35,46,63,103,107,110,117,120,123,126,
		135,138,142,149,153,160,170,173,189,192,204,207,210,216,254,257,260,287,
		295,312,315,321,327,337,347,353,355
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
