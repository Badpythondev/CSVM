//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/GAMER/source/repos/ProtoGram/CubeScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CubeScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, WHILE=51, ARRAY=52, 
		Comment=53, BOOL_OPERATOR=54, INTEGER=55, FLOAT=56, IMPORT=57, STRING=58, 
		BOOL=59, TYPE=60, NULL=61, WS=62, IDENTIFIER=63;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseifBlock = 4, RULE_whileBlock = 5, RULE_assignment = 6, RULE_functionCall = 7, 
		RULE_block = 8, RULE_expression = 9, RULE_multOp = 10, RULE_addOp = 11, 
		RULE_cmpOp = 12, RULE_boolOp = 13, RULE_constant = 14;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseifBlock", "whileBlock", 
		"assignment", "functionCall", "block", "expression", "multOp", "addOp", 
		"cmpOp", "boolOp", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'('", "')'", "'struct'", "','", "'{'", "'}'", "'>'", "';'", 
		"'='", "'string'", "'.'", "'return'", "'break'", "'continue'", "'house'", 
		"':'", "'['", "']'", "'if'", "'else'", "'!'", "'?'", "'*'", "'/'", "'%'", 
		"'^'", "'<<'", "'>>'", "'&'", "'|'", "'&&'", "'||'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'^='", "'<<='", "'>>='", "'&='", "'|='", "'+'", "'-'", 
		"'<'", "'<='", "'>='", "'=='", "'!='", null, null, null, null, null, null, 
		null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WHILE", "ARRAY", "Comment", "BOOL_OPERATOR", "INTEGER", 
		"FLOAT", "IMPORT", "STRING", "BOOL", "TYPE", "NULL", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CubeScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CubeScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CubeScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CubeScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CubeScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4640959416004121582L) != 0)) {
				{
				{
				State = 30;
				line();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__9:
			case T__10:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case ARRAY:
			case INTEGER:
			case FLOAT:
			case IMPORT:
			case STRING:
			case BOOL:
			case TYPE:
			case NULL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				statement();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				ifBlock();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				whileBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForeachstatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForeachstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterForeachstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitForeachstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinuestatementContext : StatementContext {
		public ContinuestatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterContinuestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitContinuestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinuestatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HousestatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		public HousestatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterHousestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitHousestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHousestatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VaribledeclarationContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		public VaribledeclarationContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterVaribledeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitVaribledeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVaribledeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentexprContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentexprContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallstatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(CubeScriptParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(CubeScriptParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctioncallstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportstatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(CubeScriptParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		public ImportstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterImportstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitImportstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakstatementContext : StatementContext {
		public BreakstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBreakstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBreakstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForstatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		public ForstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterForstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitForstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallstatmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public FunctioncallstatmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallstatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallstatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallstatment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringarrayContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(CubeScriptParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CubeScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		public StringarrayContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterStringarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitStringarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringarray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnstatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnstatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArraydefinitionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(CubeScriptParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArraydefinitionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterArraydefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitArraydefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraydefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new AssignmentexprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				assignment();
				}
				break;
			case 2:
				_localctx = new ForstatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				Match(T__0);
				State = 45;
				Match(T__1);
				State = 47;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 46;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 49;
				expression(0);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 50;
					Match(IDENTIFIER);
					}
				}

				State = 53;
				Match(T__2);
				State = 54;
				block();
				}
				break;
			case 3:
				_localctx = new FunctioncallstatmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(T__3);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 57;
					Match(IDENTIFIER);
					}
				}

				State = 60;
				Match(T__1);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 61;
					Match(IDENTIFIER);
					}
				}

				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 64;
					Match(T__4);
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IDENTIFIER) {
						{
						State = 65;
						Match(IDENTIFIER);
						}
					}

					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 73;
				Match(T__2);
				State = 74;
				Match(T__5);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4640959416004121582L) != 0)) {
					{
					{
					State = 75;
					line();
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 81;
				Match(T__6);
				}
				break;
			case 4:
				_localctx = new FunctioncallstatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 82;
				Match(T__3);
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 83;
					Match(IDENTIFIER);
					}
				}

				State = 86;
				Match(T__1);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE) {
					{
					State = 87;
					Match(TYPE);
					}
				}

				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 90;
					Match(T__4);
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TYPE) {
						{
						State = 91;
						Match(TYPE);
						}
					}

					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 99;
				Match(T__2);
				State = 100;
				Match(T__5);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4640959416004121582L) != 0)) {
					{
					{
					State = 101;
					line();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 107;
				Match(T__6);
				}
				break;
			case 5:
				_localctx = new ForeachstatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				Match(T__0);
				State = 109;
				Match(T__1);
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 110;
					Match(IDENTIFIER);
					}
				}

				State = 113;
				Match(T__7);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
					{
					State = 114;
					expression(0);
					}
				}

				State = 117;
				Match(T__2);
				State = 118;
				block();
				}
				break;
			case 6:
				_localctx = new FunctioncallstatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 119;
				functionCall();
				State = 120;
				Match(T__8);
				}
				break;
			case 7:
				_localctx = new VaribledeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 122;
				Match(TYPE);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 123;
					Match(IDENTIFIER);
					}
				}

				State = 126;
				Match(T__9);
				State = 127;
				expression(0);
				State = 128;
				Match(T__8);
				}
				break;
			case 8:
				_localctx = new StringarrayContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 130;
					Match(IDENTIFIER);
					}
				}

				State = 133;
				Match(T__10);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 134;
					Match(IDENTIFIER);
					}
				}

				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 137;
					Match(ARRAY);
					}
				}

				State = 140;
				Match(T__9);
				State = 141;
				functionCall();
				State = 142;
				Match(T__8);
				}
				break;
			case 9:
				_localctx = new StringarrayContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 144;
				Match(T__10);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 145;
					Match(IDENTIFIER);
					}
				}

				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 148;
					Match(ARRAY);
					}
				}

				State = 151;
				Match(T__9);
				State = 152;
				Match(STRING);
				State = 153;
				Match(T__8);
				}
				break;
			case 10:
				_localctx = new ImportstatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 154;
				Match(IMPORT);
				State = 155;
				Match(IDENTIFIER);
				State = 156;
				Match(T__8);
				}
				break;
			case 11:
				_localctx = new ImportstatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 157;
				Match(IMPORT);
				State = 158;
				Match(IDENTIFIER);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 159;
					Match(T__11);
					State = 160;
					Match(IDENTIFIER);
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 166;
				Match(T__8);
				}
				break;
			case 12:
				_localctx = new ReturnstatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 167;
				Match(T__12);
				State = 168;
				expression(0);
				State = 169;
				Match(T__8);
				}
				break;
			case 13:
				_localctx = new BreakstatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 171;
				Match(T__13);
				State = 172;
				Match(T__8);
				}
				break;
			case 14:
				_localctx = new ContinuestatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 173;
				Match(T__14);
				State = 174;
				Match(T__8);
				}
				break;
			case 15:
				_localctx = new HousestatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 175;
				Match(T__15);
				State = 176;
				Match(T__16);
				State = 178;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 177;
					Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new StringarrayContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 180;
					Match(IDENTIFIER);
					}
				}

				State = 183;
				Match(TYPE);
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 184;
					Match(IDENTIFIER);
					}
				}

				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 187;
					Match(ARRAY);
					}
				}

				State = 190;
				Match(T__9);
				State = 191;
				functionCall();
				State = 192;
				Match(T__8);
				}
				break;
			case 17:
				_localctx = new ArraydefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 195;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 194;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 197;
					constant();
					}
					break;
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 200;
					Match(IDENTIFIER);
					}
				}

				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARRAY) {
					{
					State = 203;
					Match(ARRAY);
					}
				}

				State = 206;
				Match(T__9);
				State = 207;
				Match(T__17);
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
					{
					State = 208;
					expression(0);
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 209;
						Match(T__4);
						State = 210;
						expression(0);
						}
						}
						State = 215;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 218;
				Match(T__18);
				State = 219;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__19);
			State = 223;
			expression(0);
			State = 224;
			block();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 225;
				Match(T__20);
				State = 226;
				elseifBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterElseifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitElseifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseifBlock);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				block();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CubeScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(WHILE);
			State = 234;
			expression(0);
			State = 235;
			block();
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 236;
				Match(T__20);
				State = 237;
				elseifBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(IDENTIFIER);
			State = 241;
			Match(T__9);
			State = 242;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctioncallexprsContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctioncallexprsContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallexprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		int _la;
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				_localctx = new FunctioncallexprsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				Match(IDENTIFIER);
				State = 245;
				Match(T__1);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
					{
					State = 246;
					expression(0);
					State = 251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 247;
						Match(T__4);
						State = 248;
						expression(0);
						}
						}
						State = 253;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 256;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new FunctioncallexprsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(IDENTIFIER);
				State = 258;
				Match(T__11);
				State = 259;
				Match(IDENTIFIER);
				State = 260;
				Match(T__1);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
					{
					State = 261;
					expression(0);
					State = 266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 262;
						Match(T__4);
						State = 263;
						expression(0);
						}
						}
						State = 268;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 271;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(T__5);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4640959416004121582L) != 0)) {
				{
				{
				State = 275;
				line();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 281;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterNotexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitNotexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterTernaryexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitTernaryexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AddexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAddexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAddexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterConstantexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitConstantexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctioncallexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterFunctioncallexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitFunctioncallexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BoolexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBoolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBoolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterParenthesisexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitParenthesisexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterMultexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitMultexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DotexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterDotexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitDotexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayassignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayassignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterArrayassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitArrayassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayassignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotfunctioncallexprsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CubeScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CubeScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotfunctioncallexprsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterDotfunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitDotfunctioncallexprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotfunctioncallexprs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterArrayexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitArrayexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VaribleassignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VaribleassignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterVaribleassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitVaribleassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVaribleassignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpexprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public CmpexprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterCmpexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitCmpexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				_localctx = new ConstantexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 284;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new VaribleassignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285;
				Match(IDENTIFIER);
				State = 286;
				constant();
				State = 287;
				Match(T__9);
				State = 288;
				expression(19);
				}
				break;
			case 3:
				{
				_localctx = new FunctioncallexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new ParenthesisexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291;
				Match(T__1);
				State = 292;
				expression(0);
				State = 293;
				Match(T__2);
				}
				break;
			case 5:
				{
				_localctx = new NotexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295;
				Match(T__21);
				State = 296;
				expression(16);
				}
				break;
			case 6:
				{
				_localctx = new DotexprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				Match(IDENTIFIER);
				State = 298;
				Match(T__11);
				State = 299;
				Match(IDENTIFIER);
				}
				break;
			case 7:
				{
				_localctx = new DotfunctioncallexprsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 300;
				Match(IDENTIFIER);
				State = 301;
				Match(T__11);
				State = 302;
				Match(IDENTIFIER);
				State = 303;
				Match(T__1);
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
					{
					State = 304;
					expression(0);
					State = 309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 305;
						Match(T__4);
						State = 306;
						expression(0);
						}
						}
						State = 311;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 314;
				Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 413;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 411;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						_localctx = new MultexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 317;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 318;
						multOp();
						State = 319;
						expression(16);
						}
						break;
					case 2:
						{
						_localctx = new AddexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 321;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 322;
						addOp();
						State = 323;
						expression(15);
						}
						break;
					case 3:
						{
						_localctx = new CmpexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 326;
						cmpOp();
						State = 327;
						expression(14);
						}
						break;
					case 4:
						{
						_localctx = new BoolexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 329;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 330;
						boolOp();
						State = 331;
						expression(13);
						}
						break;
					case 5:
						{
						_localctx = new TernaryexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 333;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 334;
						Match(T__22);
						State = 335;
						expression(0);
						State = 336;
						Match(T__16);
						State = 337;
						expression(12);
						}
						break;
					case 6:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 339;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 340;
						Match(T__17);
						State = 341;
						expression(0);
						State = 342;
						Match(T__18);
						State = 343;
						Match(T__9);
						State = 344;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 346;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 347;
						Match(T__5);
						State = 348;
						expression(0);
						State = 349;
						Match(T__6);
						State = 350;
						Match(T__9);
						State = 351;
						expression(5);
						}
						break;
					case 8:
						{
						_localctx = new ArrayexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 354;
						Match(T__17);
						State = 355;
						expression(0);
						State = 356;
						Match(T__18);
						}
						break;
					case 9:
						{
						_localctx = new DotexprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 358;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 359;
						Match(T__11);
						State = 360;
						Match(IDENTIFIER);
						}
						break;
					case 10:
						{
						_localctx = new DotfunctioncallexprsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 361;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 362;
						Match(T__11);
						State = 363;
						Match(IDENTIFIER);
						State = 364;
						Match(T__1);
						State = 373;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
							{
							State = 365;
							expression(0);
							State = 370;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__4) {
								{
								{
								State = 366;
								Match(T__4);
								State = 367;
								expression(0);
								}
								}
								State = 372;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 375;
						Match(T__2);
						}
						break;
					case 11:
						{
						_localctx = new DotfunctioncallexprsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 376;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 377;
						Match(T__11);
						State = 378;
						Match(IDENTIFIER);
						State = 379;
						Match(T__1);
						State = 388;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
							{
							State = 380;
							expression(0);
							State = 385;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__4) {
								{
								{
								State = 381;
								Match(T__4);
								State = 382;
								expression(0);
								}
								}
								State = 387;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 390;
						Match(T__2);
						State = 391;
						Match(T__11);
						State = 392;
						Match(IDENTIFIER);
						}
						break;
					case 12:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 393;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 394;
						Match(T__17);
						State = 395;
						expression(0);
						State = 396;
						Match(T__18);
						State = 397;
						Match(T__9);
						State = 398;
						functionCall();
						}
						break;
					case 13:
						{
						_localctx = new ArrayassignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 400;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 401;
						Match(T__5);
						State = 405;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003518013436L) != 0)) {
							{
							{
							State = 402;
							expression(0);
							}
							}
							State = 407;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 408;
						Match(T__6);
						State = 409;
						Match(T__9);
						State = 410;
						functionCall();
						}
						break;
					}
					} 
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 20, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592169268224L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_la = TokenStream.LA(1);
			if ( !(_la==T__43 || _la==T__44) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterCmpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitCmpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2181431069507840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OPERATOR() { return GetToken(CubeScriptParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CubeScriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CubeScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CubeScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CubeScriptParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CubeScriptParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CubeScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CubeScriptParser.TYPE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICubeScriptListener typedListener = listener as ICubeScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICubeScriptVisitor<TResult> typedVisitor = visitor as ICubeScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 28, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -4791830003522207744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,427,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,5,0,32,8,0,10,0,12,0,35,9,0,1,0,1,0,1,1,1,1,1,1,3,1,42,8,1,1,2,1,2,
		1,2,1,2,3,2,48,8,2,1,2,1,2,3,2,52,8,2,1,2,1,2,1,2,1,2,1,2,3,2,59,8,2,1,
		2,1,2,3,2,63,8,2,1,2,1,2,3,2,67,8,2,5,2,69,8,2,10,2,12,2,72,9,2,1,2,1,
		2,1,2,5,2,77,8,2,10,2,12,2,80,9,2,1,2,1,2,1,2,3,2,85,8,2,1,2,1,2,3,2,89,
		8,2,1,2,1,2,3,2,93,8,2,5,2,95,8,2,10,2,12,2,98,9,2,1,2,1,2,1,2,5,2,103,
		8,2,10,2,12,2,106,9,2,1,2,1,2,1,2,1,2,3,2,112,8,2,1,2,1,2,3,2,116,8,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,125,8,2,1,2,1,2,1,2,1,2,1,2,3,2,132,8,
		2,1,2,1,2,3,2,136,8,2,1,2,3,2,139,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,147,
		8,2,1,2,3,2,150,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,162,8,
		2,10,2,12,2,165,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
		2,179,8,2,1,2,3,2,182,8,2,1,2,1,2,3,2,186,8,2,1,2,3,2,189,8,2,1,2,1,2,
		1,2,1,2,1,2,3,2,196,8,2,1,2,3,2,199,8,2,1,2,3,2,202,8,2,1,2,3,2,205,8,
		2,1,2,1,2,1,2,1,2,1,2,5,2,212,8,2,10,2,12,2,215,9,2,3,2,217,8,2,1,2,1,
		2,3,2,221,8,2,1,3,1,3,1,3,1,3,1,3,3,3,228,8,3,1,4,1,4,3,4,232,8,4,1,5,
		1,5,1,5,1,5,1,5,3,5,239,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,250,
		8,7,10,7,12,7,253,9,7,3,7,255,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,
		265,8,7,10,7,12,7,268,9,7,3,7,270,8,7,1,7,3,7,273,8,7,1,8,1,8,5,8,277,
		8,8,10,8,12,8,280,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,308,8,9,10,
		9,12,9,311,9,9,3,9,313,8,9,1,9,3,9,316,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,369,8,9,10,9,12,9,372,9,9,3,9,
		374,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,384,8,9,10,9,12,9,387,9,9,
		3,9,389,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,404,
		8,9,10,9,12,9,407,9,9,1,9,1,9,1,9,5,9,412,8,9,10,9,12,9,415,9,9,1,10,1,
		10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,0,1,18,15,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,0,4,2,0,10,10,24,43,1,0,44,45,2,0,8,8,46,50,
		3,0,55,56,58,61,63,63,496,0,33,1,0,0,0,2,41,1,0,0,0,4,220,1,0,0,0,6,222,
		1,0,0,0,8,231,1,0,0,0,10,233,1,0,0,0,12,240,1,0,0,0,14,272,1,0,0,0,16,
		274,1,0,0,0,18,315,1,0,0,0,20,416,1,0,0,0,22,418,1,0,0,0,24,420,1,0,0,
		0,26,422,1,0,0,0,28,424,1,0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,35,1,0,
		0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,36,1,0,0,0,35,33,1,0,0,0,36,37,5,0,
		0,1,37,1,1,0,0,0,38,42,3,4,2,0,39,42,3,6,3,0,40,42,3,10,5,0,41,38,1,0,
		0,0,41,39,1,0,0,0,41,40,1,0,0,0,42,3,1,0,0,0,43,221,3,12,6,0,44,45,5,1,
		0,0,45,47,5,2,0,0,46,48,5,63,0,0,47,46,1,0,0,0,47,48,1,0,0,0,48,49,1,0,
		0,0,49,51,3,18,9,0,50,52,5,63,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,53,1,
		0,0,0,53,54,5,3,0,0,54,55,3,16,8,0,55,221,1,0,0,0,56,58,5,4,0,0,57,59,
		5,63,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,62,5,2,0,0,61,63,
		5,63,0,0,62,61,1,0,0,0,62,63,1,0,0,0,63,70,1,0,0,0,64,66,5,5,0,0,65,67,
		5,63,0,0,66,65,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,64,1,0,0,0,69,72,
		1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,70,1,0,0,0,73,74,
		5,3,0,0,74,78,5,6,0,0,75,77,3,2,1,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,
		1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,221,5,7,0,0,82,84,
		5,4,0,0,83,85,5,63,0,0,84,83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,88,
		5,2,0,0,87,89,5,60,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,96,1,0,0,0,90,92,
		5,5,0,0,91,93,5,60,0,0,92,91,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,90,
		1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,
		1,0,0,0,99,100,5,3,0,0,100,104,5,6,0,0,101,103,3,2,1,0,102,101,1,0,0,0,
		103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,
		1,0,0,0,107,221,5,7,0,0,108,109,5,1,0,0,109,111,5,2,0,0,110,112,5,63,0,
		0,111,110,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,115,5,8,0,0,114,
		116,3,18,9,0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,117,118,5,
		3,0,0,118,221,3,16,8,0,119,120,3,14,7,0,120,121,5,9,0,0,121,221,1,0,0,
		0,122,124,5,60,0,0,123,125,5,63,0,0,124,123,1,0,0,0,124,125,1,0,0,0,125,
		126,1,0,0,0,126,127,5,10,0,0,127,128,3,18,9,0,128,129,5,9,0,0,129,221,
		1,0,0,0,130,132,5,63,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,
		0,133,135,5,11,0,0,134,136,5,63,0,0,135,134,1,0,0,0,135,136,1,0,0,0,136,
		138,1,0,0,0,137,139,5,52,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,1,
		0,0,0,140,141,5,10,0,0,141,142,3,14,7,0,142,143,5,9,0,0,143,221,1,0,0,
		0,144,146,5,11,0,0,145,147,5,63,0,0,146,145,1,0,0,0,146,147,1,0,0,0,147,
		149,1,0,0,0,148,150,5,52,0,0,149,148,1,0,0,0,149,150,1,0,0,0,150,151,1,
		0,0,0,151,152,5,10,0,0,152,153,5,58,0,0,153,221,5,9,0,0,154,155,5,57,0,
		0,155,156,5,63,0,0,156,221,5,9,0,0,157,158,5,57,0,0,158,163,5,63,0,0,159,
		160,5,12,0,0,160,162,5,63,0,0,161,159,1,0,0,0,162,165,1,0,0,0,163,161,
		1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,221,5,9,0,
		0,167,168,5,13,0,0,168,169,3,18,9,0,169,170,5,9,0,0,170,221,1,0,0,0,171,
		172,5,14,0,0,172,221,5,9,0,0,173,174,5,15,0,0,174,221,5,9,0,0,175,176,
		5,16,0,0,176,178,5,17,0,0,177,179,5,63,0,0,178,177,1,0,0,0,178,179,1,0,
		0,0,179,221,1,0,0,0,180,182,5,63,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,
		183,1,0,0,0,183,185,5,60,0,0,184,186,5,63,0,0,185,184,1,0,0,0,185,186,
		1,0,0,0,186,188,1,0,0,0,187,189,5,52,0,0,188,187,1,0,0,0,188,189,1,0,0,
		0,189,190,1,0,0,0,190,191,5,10,0,0,191,192,3,14,7,0,192,193,5,9,0,0,193,
		221,1,0,0,0,194,196,5,63,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,198,1,
		0,0,0,197,199,3,28,14,0,198,197,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,
		0,200,202,5,63,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,
		205,5,52,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,
		10,0,0,207,216,5,18,0,0,208,213,3,18,9,0,209,210,5,5,0,0,210,212,3,18,
		9,0,211,209,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,
		217,1,0,0,0,215,213,1,0,0,0,216,208,1,0,0,0,216,217,1,0,0,0,217,218,1,
		0,0,0,218,219,5,19,0,0,219,221,5,9,0,0,220,43,1,0,0,0,220,44,1,0,0,0,220,
		56,1,0,0,0,220,82,1,0,0,0,220,108,1,0,0,0,220,119,1,0,0,0,220,122,1,0,
		0,0,220,131,1,0,0,0,220,144,1,0,0,0,220,154,1,0,0,0,220,157,1,0,0,0,220,
		167,1,0,0,0,220,171,1,0,0,0,220,173,1,0,0,0,220,175,1,0,0,0,220,181,1,
		0,0,0,220,195,1,0,0,0,221,5,1,0,0,0,222,223,5,20,0,0,223,224,3,18,9,0,
		224,227,3,16,8,0,225,226,5,21,0,0,226,228,3,8,4,0,227,225,1,0,0,0,227,
		228,1,0,0,0,228,7,1,0,0,0,229,232,3,16,8,0,230,232,3,6,3,0,231,229,1,0,
		0,0,231,230,1,0,0,0,232,9,1,0,0,0,233,234,5,51,0,0,234,235,3,18,9,0,235,
		238,3,16,8,0,236,237,5,21,0,0,237,239,3,8,4,0,238,236,1,0,0,0,238,239,
		1,0,0,0,239,11,1,0,0,0,240,241,5,63,0,0,241,242,5,10,0,0,242,243,3,18,
		9,0,243,13,1,0,0,0,244,245,5,63,0,0,245,254,5,2,0,0,246,251,3,18,9,0,247,
		248,5,5,0,0,248,250,3,18,9,0,249,247,1,0,0,0,250,253,1,0,0,0,251,249,1,
		0,0,0,251,252,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,246,1,0,0,0,
		254,255,1,0,0,0,255,256,1,0,0,0,256,273,5,3,0,0,257,258,5,63,0,0,258,259,
		5,12,0,0,259,260,5,63,0,0,260,269,5,2,0,0,261,266,3,18,9,0,262,263,5,5,
		0,0,263,265,3,18,9,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,
		267,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,269,261,1,0,0,0,269,270,1,
		0,0,0,270,271,1,0,0,0,271,273,5,3,0,0,272,244,1,0,0,0,272,257,1,0,0,0,
		273,15,1,0,0,0,274,278,5,6,0,0,275,277,3,2,1,0,276,275,1,0,0,0,277,280,
		1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,
		0,281,282,5,7,0,0,282,17,1,0,0,0,283,284,6,9,-1,0,284,316,3,28,14,0,285,
		286,5,63,0,0,286,287,3,28,14,0,287,288,5,10,0,0,288,289,3,18,9,19,289,
		316,1,0,0,0,290,316,3,14,7,0,291,292,5,2,0,0,292,293,3,18,9,0,293,294,
		5,3,0,0,294,316,1,0,0,0,295,296,5,22,0,0,296,316,3,18,9,16,297,298,5,63,
		0,0,298,299,5,12,0,0,299,316,5,63,0,0,300,301,5,63,0,0,301,302,5,12,0,
		0,302,303,5,63,0,0,303,312,5,2,0,0,304,309,3,18,9,0,305,306,5,5,0,0,306,
		308,3,18,9,0,307,305,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,
		0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,312,304,1,0,0,0,312,313,1,0,0,0,
		313,314,1,0,0,0,314,316,5,3,0,0,315,283,1,0,0,0,315,285,1,0,0,0,315,290,
		1,0,0,0,315,291,1,0,0,0,315,295,1,0,0,0,315,297,1,0,0,0,315,300,1,0,0,
		0,316,413,1,0,0,0,317,318,10,15,0,0,318,319,3,20,10,0,319,320,3,18,9,16,
		320,412,1,0,0,0,321,322,10,14,0,0,322,323,3,22,11,0,323,324,3,18,9,15,
		324,412,1,0,0,0,325,326,10,13,0,0,326,327,3,24,12,0,327,328,3,18,9,14,
		328,412,1,0,0,0,329,330,10,12,0,0,330,331,3,26,13,0,331,332,3,18,9,13,
		332,412,1,0,0,0,333,334,10,11,0,0,334,335,5,23,0,0,335,336,3,18,9,0,336,
		337,5,17,0,0,337,338,3,18,9,12,338,412,1,0,0,0,339,340,10,6,0,0,340,341,
		5,18,0,0,341,342,3,18,9,0,342,343,5,19,0,0,343,344,5,10,0,0,344,345,3,
		18,9,7,345,412,1,0,0,0,346,347,10,4,0,0,347,348,5,6,0,0,348,349,3,18,9,
		0,349,350,5,7,0,0,350,351,5,10,0,0,351,352,3,18,9,5,352,412,1,0,0,0,353,
		354,10,10,0,0,354,355,5,18,0,0,355,356,3,18,9,0,356,357,5,19,0,0,357,412,
		1,0,0,0,358,359,10,9,0,0,359,360,5,12,0,0,360,412,5,63,0,0,361,362,10,
		8,0,0,362,363,5,12,0,0,363,364,5,63,0,0,364,373,5,2,0,0,365,370,3,18,9,
		0,366,367,5,5,0,0,367,369,3,18,9,0,368,366,1,0,0,0,369,372,1,0,0,0,370,
		368,1,0,0,0,370,371,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,373,365,1,
		0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,412,5,3,0,0,376,377,10,7,0,0,
		377,378,5,12,0,0,378,379,5,63,0,0,379,388,5,2,0,0,380,385,3,18,9,0,381,
		382,5,5,0,0,382,384,3,18,9,0,383,381,1,0,0,0,384,387,1,0,0,0,385,383,1,
		0,0,0,385,386,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,388,380,1,0,0,0,
		388,389,1,0,0,0,389,390,1,0,0,0,390,391,5,3,0,0,391,392,5,12,0,0,392,412,
		5,63,0,0,393,394,10,5,0,0,394,395,5,18,0,0,395,396,3,18,9,0,396,397,5,
		19,0,0,397,398,5,10,0,0,398,399,3,14,7,0,399,412,1,0,0,0,400,401,10,3,
		0,0,401,405,5,6,0,0,402,404,3,18,9,0,403,402,1,0,0,0,404,407,1,0,0,0,405,
		403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,
		7,0,0,409,410,5,10,0,0,410,412,3,14,7,0,411,317,1,0,0,0,411,321,1,0,0,
		0,411,325,1,0,0,0,411,329,1,0,0,0,411,333,1,0,0,0,411,339,1,0,0,0,411,
		346,1,0,0,0,411,353,1,0,0,0,411,358,1,0,0,0,411,361,1,0,0,0,411,376,1,
		0,0,0,411,393,1,0,0,0,411,400,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,
		413,414,1,0,0,0,414,19,1,0,0,0,415,413,1,0,0,0,416,417,7,0,0,0,417,21,
		1,0,0,0,418,419,7,1,0,0,419,23,1,0,0,0,420,421,7,2,0,0,421,25,1,0,0,0,
		422,423,5,54,0,0,423,27,1,0,0,0,424,425,7,3,0,0,425,29,1,0,0,0,53,33,41,
		47,51,58,62,66,70,78,84,88,92,96,104,111,115,124,131,135,138,146,149,163,
		178,181,185,188,195,198,201,204,213,216,220,227,231,238,251,254,266,269,
		272,278,309,312,315,370,373,385,388,405,411,413
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
