//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/GAMER/source/repos/ProtoGram/CubeScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CubeScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, WHILE=51, ARRAY=52, 
		Comment=53, BOOL_OPERATOR=54, INTEGER=55, FLOAT=56, IMPORT=57, STRING=58, 
		BOOL=59, TYPE=60, NULL=61, WS=62, IDENTIFIER=63;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
		"T__49", "WHILE", "ARRAY", "Comment", "BOOL_OPERATOR", "INTEGER", "FLOAT", 
		"ESC", "UNICODE", "HEX", "SAFE", "IMPORT", "STRING", "BOOL", "TYPE", "NULL", 
		"WS", "IDENTIFIER"
	};


	public CubeScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CubeScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'('", "')'", "'struct'", "','", "'{'", "'}'", "'>'", "';'", 
		"'='", "'string'", "'.'", "'return'", "'break'", "'continue'", "'house'", 
		"':'", "'['", "']'", "'if'", "'else'", "'!'", "'?'", "'*'", "'/'", "'%'", 
		"'^'", "'<<'", "'>>'", "'&'", "'|'", "'&&'", "'||'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'^='", "'<<='", "'>>='", "'&='", "'|='", "'+'", "'-'", 
		"'<'", "'<='", "'>='", "'=='", "'!='", null, null, null, null, null, null, 
		null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WHILE", "ARRAY", "Comment", "BOOL_OPERATOR", "INTEGER", 
		"FLOAT", "IMPORT", "STRING", "BOOL", "TYPE", "NULL", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CubeScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CubeScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,63,463,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
		1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
		1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
		1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
		1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
		1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,
		1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
		302,8,50,1,51,1,51,1,52,1,52,1,52,1,52,5,52,310,8,52,10,52,12,52,313,9,
		52,1,52,1,52,1,52,1,52,5,52,319,8,52,10,52,12,52,322,9,52,1,52,1,52,1,
		52,1,52,5,52,328,8,52,10,52,12,52,331,9,52,3,52,333,8,52,1,52,1,52,1,53,
		1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,345,8,53,1,54,4,54,348,8,54,11,
		54,12,54,349,1,55,5,55,353,8,55,10,55,12,55,356,9,55,1,55,1,55,4,55,360,
		8,55,11,55,12,55,361,1,56,1,56,1,56,3,56,367,8,56,1,57,1,57,1,57,1,57,
		1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,398,8,60,1,
		61,1,61,1,61,5,61,403,8,61,10,61,12,61,406,9,61,1,61,1,61,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,419,8,62,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,3,63,443,8,63,1,64,1,64,1,64,1,64,1,64,1,65,4,65,451,8,
		65,11,65,12,65,452,1,65,1,65,1,66,1,66,5,66,459,8,66,10,66,12,66,462,9,
		66,1,320,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
		73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
		97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,0,115,0,117,
		0,119,0,121,57,123,58,125,59,127,60,129,61,131,62,133,63,1,0,9,4,0,91,
		91,93,93,123,123,125,125,2,0,10,10,13,13,1,0,48,57,8,0,34,34,47,47,92,
		92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,
		31,34,34,92,92,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,481,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
		0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
		0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
		0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
		1,135,1,0,0,0,3,139,1,0,0,0,5,141,1,0,0,0,7,143,1,0,0,0,9,150,1,0,0,0,
		11,152,1,0,0,0,13,154,1,0,0,0,15,156,1,0,0,0,17,158,1,0,0,0,19,160,1,0,
		0,0,21,162,1,0,0,0,23,169,1,0,0,0,25,171,1,0,0,0,27,178,1,0,0,0,29,184,
		1,0,0,0,31,193,1,0,0,0,33,199,1,0,0,0,35,201,1,0,0,0,37,203,1,0,0,0,39,
		205,1,0,0,0,41,208,1,0,0,0,43,213,1,0,0,0,45,215,1,0,0,0,47,217,1,0,0,
		0,49,219,1,0,0,0,51,221,1,0,0,0,53,223,1,0,0,0,55,225,1,0,0,0,57,228,1,
		0,0,0,59,231,1,0,0,0,61,233,1,0,0,0,63,235,1,0,0,0,65,238,1,0,0,0,67,241,
		1,0,0,0,69,244,1,0,0,0,71,247,1,0,0,0,73,250,1,0,0,0,75,253,1,0,0,0,77,
		256,1,0,0,0,79,259,1,0,0,0,81,263,1,0,0,0,83,267,1,0,0,0,85,270,1,0,0,
		0,87,273,1,0,0,0,89,275,1,0,0,0,91,277,1,0,0,0,93,279,1,0,0,0,95,282,1,
		0,0,0,97,285,1,0,0,0,99,288,1,0,0,0,101,301,1,0,0,0,103,303,1,0,0,0,105,
		332,1,0,0,0,107,344,1,0,0,0,109,347,1,0,0,0,111,354,1,0,0,0,113,363,1,
		0,0,0,115,368,1,0,0,0,117,374,1,0,0,0,119,376,1,0,0,0,121,397,1,0,0,0,
		123,399,1,0,0,0,125,418,1,0,0,0,127,442,1,0,0,0,129,444,1,0,0,0,131,450,
		1,0,0,0,133,456,1,0,0,0,135,136,5,102,0,0,136,137,5,111,0,0,137,138,5,
		114,0,0,138,2,1,0,0,0,139,140,5,40,0,0,140,4,1,0,0,0,141,142,5,41,0,0,
		142,6,1,0,0,0,143,144,5,115,0,0,144,145,5,116,0,0,145,146,5,114,0,0,146,
		147,5,117,0,0,147,148,5,99,0,0,148,149,5,116,0,0,149,8,1,0,0,0,150,151,
		5,44,0,0,151,10,1,0,0,0,152,153,5,123,0,0,153,12,1,0,0,0,154,155,5,125,
		0,0,155,14,1,0,0,0,156,157,5,62,0,0,157,16,1,0,0,0,158,159,5,59,0,0,159,
		18,1,0,0,0,160,161,5,61,0,0,161,20,1,0,0,0,162,163,5,115,0,0,163,164,5,
		116,0,0,164,165,5,114,0,0,165,166,5,105,0,0,166,167,5,110,0,0,167,168,
		5,103,0,0,168,22,1,0,0,0,169,170,5,46,0,0,170,24,1,0,0,0,171,172,5,114,
		0,0,172,173,5,101,0,0,173,174,5,116,0,0,174,175,5,117,0,0,175,176,5,114,
		0,0,176,177,5,110,0,0,177,26,1,0,0,0,178,179,5,98,0,0,179,180,5,114,0,
		0,180,181,5,101,0,0,181,182,5,97,0,0,182,183,5,107,0,0,183,28,1,0,0,0,
		184,185,5,99,0,0,185,186,5,111,0,0,186,187,5,110,0,0,187,188,5,116,0,0,
		188,189,5,105,0,0,189,190,5,110,0,0,190,191,5,117,0,0,191,192,5,101,0,
		0,192,30,1,0,0,0,193,194,5,104,0,0,194,195,5,111,0,0,195,196,5,117,0,0,
		196,197,5,115,0,0,197,198,5,101,0,0,198,32,1,0,0,0,199,200,5,58,0,0,200,
		34,1,0,0,0,201,202,5,91,0,0,202,36,1,0,0,0,203,204,5,93,0,0,204,38,1,0,
		0,0,205,206,5,105,0,0,206,207,5,102,0,0,207,40,1,0,0,0,208,209,5,101,0,
		0,209,210,5,108,0,0,210,211,5,115,0,0,211,212,5,101,0,0,212,42,1,0,0,0,
		213,214,5,33,0,0,214,44,1,0,0,0,215,216,5,63,0,0,216,46,1,0,0,0,217,218,
		5,42,0,0,218,48,1,0,0,0,219,220,5,47,0,0,220,50,1,0,0,0,221,222,5,37,0,
		0,222,52,1,0,0,0,223,224,5,94,0,0,224,54,1,0,0,0,225,226,5,60,0,0,226,
		227,5,60,0,0,227,56,1,0,0,0,228,229,5,62,0,0,229,230,5,62,0,0,230,58,1,
		0,0,0,231,232,5,38,0,0,232,60,1,0,0,0,233,234,5,124,0,0,234,62,1,0,0,0,
		235,236,5,38,0,0,236,237,5,38,0,0,237,64,1,0,0,0,238,239,5,124,0,0,239,
		240,5,124,0,0,240,66,1,0,0,0,241,242,5,43,0,0,242,243,5,61,0,0,243,68,
		1,0,0,0,244,245,5,45,0,0,245,246,5,61,0,0,246,70,1,0,0,0,247,248,5,42,
		0,0,248,249,5,61,0,0,249,72,1,0,0,0,250,251,5,47,0,0,251,252,5,61,0,0,
		252,74,1,0,0,0,253,254,5,37,0,0,254,255,5,61,0,0,255,76,1,0,0,0,256,257,
		5,94,0,0,257,258,5,61,0,0,258,78,1,0,0,0,259,260,5,60,0,0,260,261,5,60,
		0,0,261,262,5,61,0,0,262,80,1,0,0,0,263,264,5,62,0,0,264,265,5,62,0,0,
		265,266,5,61,0,0,266,82,1,0,0,0,267,268,5,38,0,0,268,269,5,61,0,0,269,
		84,1,0,0,0,270,271,5,124,0,0,271,272,5,61,0,0,272,86,1,0,0,0,273,274,5,
		43,0,0,274,88,1,0,0,0,275,276,5,45,0,0,276,90,1,0,0,0,277,278,5,60,0,0,
		278,92,1,0,0,0,279,280,5,60,0,0,280,281,5,61,0,0,281,94,1,0,0,0,282,283,
		5,62,0,0,283,284,5,61,0,0,284,96,1,0,0,0,285,286,5,61,0,0,286,287,5,61,
		0,0,287,98,1,0,0,0,288,289,5,33,0,0,289,290,5,61,0,0,290,100,1,0,0,0,291,
		292,5,119,0,0,292,293,5,104,0,0,293,294,5,105,0,0,294,295,5,108,0,0,295,
		302,5,101,0,0,296,297,5,117,0,0,297,298,5,110,0,0,298,299,5,116,0,0,299,
		300,5,105,0,0,300,302,5,108,0,0,301,291,1,0,0,0,301,296,1,0,0,0,302,102,
		1,0,0,0,303,304,7,0,0,0,304,104,1,0,0,0,305,306,5,47,0,0,306,307,5,47,
		0,0,307,311,1,0,0,0,308,310,8,1,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,
		309,1,0,0,0,311,312,1,0,0,0,312,333,1,0,0,0,313,311,1,0,0,0,314,315,5,
		47,0,0,315,316,5,42,0,0,316,320,1,0,0,0,317,319,9,0,0,0,318,317,1,0,0,
		0,319,322,1,0,0,0,320,321,1,0,0,0,320,318,1,0,0,0,321,323,1,0,0,0,322,
		320,1,0,0,0,323,324,5,42,0,0,324,333,5,47,0,0,325,329,5,35,0,0,326,328,
		8,1,0,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,
		0,330,333,1,0,0,0,331,329,1,0,0,0,332,305,1,0,0,0,332,314,1,0,0,0,332,
		325,1,0,0,0,333,334,1,0,0,0,334,335,6,52,0,0,335,106,1,0,0,0,336,337,5,
		97,0,0,337,338,5,110,0,0,338,345,5,100,0,0,339,340,5,111,0,0,340,345,5,
		114,0,0,341,342,5,120,0,0,342,343,5,111,0,0,343,345,5,114,0,0,344,336,
		1,0,0,0,344,339,1,0,0,0,344,341,1,0,0,0,345,108,1,0,0,0,346,348,7,2,0,
		0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,
		110,1,0,0,0,351,353,7,2,0,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,
		0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,359,5,46,0,0,
		358,360,7,2,0,0,359,358,1,0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,362,
		1,0,0,0,362,112,1,0,0,0,363,366,5,92,0,0,364,367,7,3,0,0,365,367,3,115,
		57,0,366,364,1,0,0,0,366,365,1,0,0,0,367,114,1,0,0,0,368,369,5,117,0,0,
		369,370,3,117,58,0,370,371,3,117,58,0,371,372,3,117,58,0,372,373,3,117,
		58,0,373,116,1,0,0,0,374,375,7,4,0,0,375,118,1,0,0,0,376,377,8,5,0,0,377,
		120,1,0,0,0,378,379,5,117,0,0,379,380,5,115,0,0,380,381,5,105,0,0,381,
		382,5,110,0,0,382,398,5,103,0,0,383,384,5,42,0,0,384,385,5,105,0,0,385,
		386,5,110,0,0,386,387,5,99,0,0,387,388,5,108,0,0,388,389,5,117,0,0,389,
		390,5,100,0,0,390,398,5,101,0,0,391,392,5,105,0,0,392,393,5,109,0,0,393,
		394,5,112,0,0,394,395,5,111,0,0,395,396,5,114,0,0,396,398,5,116,0,0,397,
		378,1,0,0,0,397,383,1,0,0,0,397,391,1,0,0,0,398,122,1,0,0,0,399,404,5,
		34,0,0,400,403,3,113,56,0,401,403,3,119,59,0,402,400,1,0,0,0,402,401,1,
		0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,
		406,404,1,0,0,0,407,408,5,34,0,0,408,124,1,0,0,0,409,410,5,116,0,0,410,
		411,5,114,0,0,411,412,5,117,0,0,412,419,5,101,0,0,413,414,5,102,0,0,414,
		415,5,97,0,0,415,416,5,108,0,0,416,417,5,115,0,0,417,419,5,101,0,0,418,
		409,1,0,0,0,418,413,1,0,0,0,419,126,1,0,0,0,420,421,5,115,0,0,421,422,
		5,116,0,0,422,423,5,114,0,0,423,424,5,105,0,0,424,425,5,110,0,0,425,443,
		5,103,0,0,426,427,5,105,0,0,427,428,5,110,0,0,428,443,5,116,0,0,429,430,
		5,102,0,0,430,431,5,108,0,0,431,432,5,111,0,0,432,433,5,97,0,0,433,443,
		5,116,0,0,434,435,5,98,0,0,435,436,5,111,0,0,436,437,5,111,0,0,437,443,
		5,108,0,0,438,439,5,110,0,0,439,440,5,117,0,0,440,441,5,108,0,0,441,443,
		5,108,0,0,442,420,1,0,0,0,442,426,1,0,0,0,442,429,1,0,0,0,442,434,1,0,
		0,0,442,438,1,0,0,0,443,128,1,0,0,0,444,445,5,110,0,0,445,446,5,117,0,
		0,446,447,5,108,0,0,447,448,5,108,0,0,448,130,1,0,0,0,449,451,7,6,0,0,
		450,449,1,0,0,0,451,452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,
		1,0,0,0,454,455,6,65,0,0,455,132,1,0,0,0,456,460,7,7,0,0,457,459,7,8,0,
		0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,
		134,1,0,0,0,462,460,1,0,0,0,18,0,301,311,320,329,332,344,349,354,361,366,
		397,402,404,418,442,452,460,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
